DIGEST 4ccc275c1081feeffee7773a61f4fcff
FPip_Prop
R15:17 Lib <> <> lib
R19:27 Pip_state <> <> lib
R29:40 Pip_stateLib <> <> lib
R42:45 Coq.Lists.List <> <> lib
R64:68 Coq.omega.Omega <> <> lib
R70:73 Coq.Lists.List <> <> lib
R75:100 Coq.Logic.ProofIrrelevance <> <> lib
def 290:304 <> verticalSharing
R342:345 Pip_state <> page rec
R392:399 Coq.Init.Logic <> :type_scope:x_'->'_x not
R431:439 Coq.Init.Logic <> :type_scope:x_'->'_x not
R440:443 Coq.Lists.List <> incl def
R469:482 Pip_stateLib <> getMappedPages def
R491:491 Pip_Prop <> s var
R484:489 Pip_Prop <> parent var
R446:457 Pip_stateLib <> getUsedPages def
R465:465 Pip_Prop <> s var
R459:463 Pip_Prop <> child var
R400:401 Coq.Lists.List <> In def
R410:420 Pip_stateLib <> getChildren def
R429:429 Pip_Prop <> s var
R422:427 Pip_Prop <> parent var
R403:407 Pip_Prop <> child var
R353:354 Coq.Lists.List <> In def
R364:376 Pip_stateLib <> getPartitions def
R390:390 Pip_Prop <> s var
R378:388 Pip_state <> multiplexer def
R356:361 Pip_Prop <> parent var
def 659:677 <> partitionsIsolation
R725:728 Pip_state <> page rec
R775:781 Coq.Init.Logic <> :type_scope:x_'->'_x not
R814:821 Coq.Init.Logic <> :type_scope:x_'->'_x not
R854:861 Coq.Init.Logic <> :type_scope:x_'->'_x not
R878:884 Coq.Init.Logic <> :type_scope:x_'->'_x not
R885:892 Lib <> disjoint def
R918:929 Pip_stateLib <> getUsedPages def
R938:938 Pip_Prop <> s var
R931:936 Pip_Prop <> child2 var
R895:906 Pip_stateLib <> getUsedPages def
R915:915 Pip_Prop <> s var
R908:913 Pip_Prop <> child1 var
R868:871 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R862:867 Pip_Prop <> child1 var
R872:877 Pip_Prop <> child2 var
R822:823 Coq.Lists.List <> In def
R833:843 Pip_stateLib <> getChildren def
R852:852 Pip_Prop <> s var
R845:850 Pip_Prop <> parent var
R825:830 Pip_Prop <> child2 var
R782:783 Coq.Lists.List <> In def
R793:803 Pip_stateLib <> getChildren def
R812:812 Pip_Prop <> s var
R805:810 Pip_Prop <> parent var
R785:790 Pip_Prop <> child1 var
R736:737 Coq.Lists.List <> In def
R747:759 Pip_stateLib <> getPartitions def
R773:773 Pip_Prop <> s var
R761:771 Pip_state <> multiplexer def
R739:744 Pip_Prop <> parent var
def 1170:1188 <> kernelDataIsolation
R1280:1286 Coq.Init.Logic <> :type_scope:x_'->'_x not
R1330:1337 Coq.Init.Logic <> :type_scope:x_'->'_x not
R1338:1345 Lib <> disjoint def
R1388:1401 Pip_stateLib <> getConfigPages def
R1414:1414 Pip_Prop <> s var
R1403:1412 Pip_Prop <> partition2 var
R1348:1371 Pip_stateLib <> getAccessibleMappedPages def
R1384:1384 Pip_Prop <> s var
R1373:1382 Pip_Prop <> partition1 var
R1287:1288 Coq.Lists.List <> In def
R1302:1314 Pip_stateLib <> getPartitions def
R1328:1328 Pip_Prop <> s var
R1316:1326 Pip_state <> multiplexer def
R1290:1299 Pip_Prop <> partition2 var
R1237:1238 Coq.Lists.List <> In def
R1252:1264 Pip_stateLib <> getPartitions def
R1278:1278 Pip_Prop <> s var
R1266:1276 Pip_state <> multiplexer def
R1240:1249 Pip_Prop <> partition1 var
def 2126:2152 <> dataStructurePdSh1Sh2asRoot
R2165:2169 Pip_state <> index rec
R2177:2181 Pip_state <> state rec
R2207:2210 Pip_state <> page rec
R2258:2262 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2316:2321 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2334:2338 Pip_state <> vaddr rec
R2346:2349 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2393:2397 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2477:2483 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2837:2837 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2509:2514 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2836:2836 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2495:2497 Coq.Init.Logic <> :type_scope:x_'='_x not
R2484:2494 Pip_Prop <> indirection var
R2498:2508 Pip_state <> defaultPage def
R2515:2516 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2779:2809 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2517:2518 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2557:2568 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2777:2778 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2531:2534 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2523:2525 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R2519:2522 Pip_Prop <> stop var
R2526:2530 Pip_Prop <> level var
R2535:2538 Pip_stateLib <> isPE def
R2556:2556 Pip_Prop <> s var
R2552:2554 Pip_Prop <> idx var
R2540:2550 Pip_Prop <> indirection var
R2582:2587 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2775:2776 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2573:2576 Coq.Init.Peano <> :nat_scope:x_'>='_x not
R2569:2572 Pip_Prop <> stop var
R2577:2581 Pip_Prop <> level var
R2588:2588 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2631:2659 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2611:2614 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2589:2592 Pip_stateLib <> isVE def
R2610:2610 Pip_Prop <> s var
R2606:2608 Pip_Prop <> idx var
R2594:2604 Pip_Prop <> indirection var
R2622:2624 Coq.Init.Logic <> :type_scope:x_'='_x not
R2615:2621 Pip_Prop <> idxroot var
R2625:2630 Pip_state <> sh1idx def
R2660:2660 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2703:2732 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2774:2774 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2683:2686 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2661:2664 Pip_stateLib <> isVA def
R2682:2682 Pip_Prop <> s var
R2678:2680 Pip_Prop <> idx var
R2666:2676 Pip_Prop <> indirection var
R2694:2696 Coq.Init.Logic <> :type_scope:x_'='_x not
R2687:2693 Pip_Prop <> idxroot var
R2697:2702 Pip_state <> sh2idx def
R2755:2758 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2733:2736 Pip_stateLib <> isPE def
R2754:2754 Pip_Prop <> s var
R2750:2752 Pip_Prop <> idx var
R2738:2748 Pip_Prop <> indirection var
R2766:2768 Coq.Init.Logic <> :type_scope:x_'='_x not
R2759:2765 Pip_Prop <> idxroot var
R2769:2773 Pip_state <> PDidx def
R2821:2824 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R2810:2820 Pip_Prop <> indirection var
R2825:2835 Pip_state <> defaultPage def
R2458:2460 Coq.Init.Logic <> :type_scope:x_'='_x not
R2422:2435 Pip_stateLib <> getIndirection def
R2457:2457 Pip_Prop <> s var
R2452:2455 Pip_Prop <> stop var
R2446:2450 Pip_Prop <> level var
R2443:2444 Pip_Prop <> va var
R2437:2441 Pip_Prop <> entry var
R2461:2464 Coq.Init.Datatypes <> Some constr
R2466:2476 Pip_Prop <> indirection var
R2380:2382 Coq.Init.Logic <> :type_scope:x_'='_x not
R2370:2373 Coq.Init.Datatypes <> Some constr
R2375:2379 Pip_Prop <> level var
R2383:2392 Pip_stateLib <> getNbLevel def
R2342:2345 Coq.Init.Logic <> True ind
R2277:2289 Pip_stateLib <> nextEntryIsPP def
R2315:2315 Pip_Prop <> s var
R2309:2313 Pip_Prop <> entry var
R2301:2307 Pip_Prop <> idxroot var
R2291:2299 Pip_Prop <> partition var
R2216:2217 Coq.Lists.List <> In def
R2230:2242 Pip_stateLib <> getPartitions def
R2256:2256 Pip_Prop <> s var
R2244:2254 Pip_state <> multiplexer def
R2219:2227 Pip_Prop <> partition var
def 2853:2871 <> wellFormedFstShadow
R2878:2882 Pip_state <> state rec
R2948:2952 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3010:3014 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3059:3062 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3093:3103 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3104:3110 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R3121:3122 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R3152:3154 Coq.Init.Logic <> :type_scope:x_'='_x not
R3123:3142 Pip_stateLib <> getVirtualAddressSh1 def
R3150:3151 Pip_Prop <> va var
R3148:3148 Pip_Prop <> s var
R3144:3146 Pip_Prop <> sh1 var
R3155:3158 Coq.Init.Datatypes <> Some constr
R3160:3169 Pip_Prop <> vainparent var
R3084:3085 Coq.Init.Logic <> :type_scope:x_'='_x not
R3063:3075 Pip_stateLib <> getMappedPage def
R3082:3083 Pip_Prop <> va var
R3080:3080 Pip_Prop <> s var
R3077:3078 Pip_Prop <> pd var
R3086:3089 Coq.Init.Datatypes <> Some constr
R3091:3092 Pip_Prop <> pg var
R3048:3050 Coq.Init.Logic <> :type_scope:x_'='_x not
R3015:3026 Pip_stateLib <> getFstShadow def
R3039:3044 Pip_state <> memory proj
R3046:3046 Pip_Prop <> s var
R3028:3036 Pip_Prop <> partition var
R3051:3054 Coq.Init.Datatypes <> Some constr
R3056:3058 Pip_Prop <> sh1 var
R3000:3002 Coq.Init.Logic <> :type_scope:x_'='_x not
R2974:2978 Pip_stateLib <> getPd def
R2991:2996 Pip_state <> memory proj
R2998:2998 Pip_Prop <> s var
R2980:2988 Pip_Prop <> partition var
R3003:3006 Coq.Init.Datatypes <> Some constr
R3008:3009 Pip_Prop <> pd var
R2906:2907 Coq.Lists.List <> In def
R2920:2932 Pip_stateLib <> getPartitions def
R2946:2946 Pip_Prop <> s var
R2934:2944 Pip_state <> multiplexer def
R2909:2917 Pip_Prop <> partition var
def 3185:3203 <> wellFormedSndShadow
R3210:3214 Pip_state <> state rec
R3280:3284 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3309:3313 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3371:3375 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3420:3423 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3454:3464 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3465:3471 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R3482:3483 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R3531:3534 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R3513:3515 Coq.Init.Logic <> :type_scope:x_'='_x not
R3484:3503 Pip_stateLib <> getVirtualAddressSh2 def
R3511:3512 Pip_Prop <> va var
R3509:3509 Pip_Prop <> s var
R3505:3507 Pip_Prop <> sh2 var
R3516:3519 Coq.Init.Datatypes <> Some constr
R3521:3530 Pip_Prop <> vainparent var
R3567:3569 Coq.Init.Logic <> :type_scope:x_'='_x not
R3535:3542 Pip_state <> beqVAddr def
R3557:3566 Pip_Prop <> vainparent var
R3544:3555 Pip_state <> defaultVAddr def
R3570:3574 Coq.Init.Datatypes <> false constr
R3445:3446 Coq.Init.Logic <> :type_scope:x_'='_x not
R3424:3436 Pip_stateLib <> getMappedPage def
R3443:3444 Pip_Prop <> va var
R3441:3441 Pip_Prop <> s var
R3438:3439 Pip_Prop <> pd var
R3447:3450 Coq.Init.Datatypes <> Some constr
R3452:3453 Pip_Prop <> pg var
R3409:3411 Coq.Init.Logic <> :type_scope:x_'='_x not
R3376:3387 Pip_stateLib <> getSndShadow def
R3400:3405 Pip_state <> memory proj
R3407:3407 Pip_Prop <> s var
R3389:3397 Pip_Prop <> partition var
R3412:3415 Coq.Init.Datatypes <> Some constr
R3417:3419 Pip_Prop <> sh2 var
R3361:3363 Coq.Init.Logic <> :type_scope:x_'='_x not
R3335:3339 Pip_stateLib <> getPd def
R3352:3357 Pip_state <> memory proj
R3359:3359 Pip_Prop <> s var
R3341:3349 Pip_Prop <> partition var
R3364:3367 Coq.Init.Datatypes <> Some constr
R3369:3370 Pip_Prop <> pd var
R3294:3297 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R3285:3293 Pip_Prop <> partition var
R3298:3308 Pip_state <> multiplexer def
R3238:3239 Coq.Lists.List <> In def
R3252:3264 Pip_stateLib <> getPartitions def
R3278:3278 Pip_Prop <> s var
R3266:3276 Pip_state <> multiplexer def
R3241:3249 Pip_Prop <> partition var
def 3591:3607 <> wellFormedShadows
R3620:3624 Pip_state <> index rec
R3632:3636 Pip_state <> state rec
R3662:3665 Pip_state <> page rec
R3713:3717 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3775:3779 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3843:3848 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3888:3892 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3974:3977 Coq.Init.Logic <> :type_scope:x_'->'_x not
R4015:4020 Coq.Init.Logic <> :type_scope:x_'->'_x not
R4144:4144 Coq.Init.Logic <> :type_scope:x_'->'_x not
R4021:4027 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4040:4042 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4102:4106 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4082:4084 Coq.Init.Logic <> :type_scope:x_'='_x not
R4043:4056 Pip_stateLib <> getIndirection def
R4081:4081 Pip_Prop <> s var
R4076:4079 Pip_Prop <> stop var
R4072:4074 Pip_Prop <> nbL var
R4069:4070 Pip_Prop <> va var
R4058:4067 Pip_Prop <> structroot var
R4085:4088 Coq.Init.Datatypes <> Some constr
R4090:4101 Pip_Prop <> indirection2 var
R4107:4107 Coq.Init.Logic <> :type_scope:x_'='_x not
R4135:4138 Coq.Init.Logic <> :type_scope:x_'='_x not
R4119:4122 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R4108:4118 Pip_state <> defaultPage def
R4123:4134 Pip_Prop <> indirection2 var
R4139:4143 Coq.Init.Datatypes <> false constr
R3978:3978 Coq.Init.Logic <> :type_scope:x_'='_x not
R4006:4009 Coq.Init.Logic <> :type_scope:x_'='_x not
R3990:3993 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R3979:3989 Pip_state <> defaultPage def
R3994:4005 Pip_Prop <> indirection1 var
R4010:4014 Coq.Init.Datatypes <> false constr
R3954:3956 Coq.Init.Logic <> :type_scope:x_'='_x not
R3919:3932 Pip_stateLib <> getIndirection def
R3953:3953 Pip_Prop <> s var
R3948:3951 Pip_Prop <> stop var
R3944:3946 Pip_Prop <> nbL var
R3941:3942 Pip_Prop <> va var
R3934:3939 Pip_Prop <> pdroot var
R3957:3960 Coq.Init.Datatypes <> Some constr
R3962:3973 Pip_Prop <> indirection1 var
R3875:3877 Coq.Init.Logic <> :type_scope:x_'='_x not
R3867:3870 Coq.Init.Datatypes <> Some constr
R3872:3874 Pip_Prop <> nbL var
R3878:3887 Pip_stateLib <> getNbLevel def
R3799:3811 Pip_stateLib <> nextEntryIsPP def
R3842:3842 Pip_Prop <> s var
R3831:3840 Pip_Prop <> structroot var
R3823:3829 Pip_Prop <> idxroot var
R3813:3821 Pip_Prop <> partition var
R3761:3763 Coq.Init.Logic <> :type_scope:x_'='_x not
R3735:3739 Pip_stateLib <> getPd def
R3752:3757 Pip_state <> memory proj
R3759:3759 Pip_Prop <> s var
R3741:3749 Pip_Prop <> partition var
R3764:3767 Coq.Init.Datatypes <> Some constr
R3769:3774 Pip_Prop <> pdroot var
R3671:3672 Coq.Lists.List <> In def
R3685:3697 Pip_stateLib <> getPartitions def
R3711:3711 Pip_Prop <> s var
R3699:3709 Pip_state <> multiplexer def
R3674:3682 Pip_Prop <> partition var
def 4842:4873 <> currentPartitionInPartitionsList
R4880:4884 Pip_state <> state rec
R4892:4893 Coq.Lists.List <> In def
R4917:4929 Pip_stateLib <> getPartitions def
R4943:4943 Pip_Prop <> s var
R4931:4941 Pip_state <> multiplexer def
R4896:4911 Pip_state <> currentPartition proj
R4913:4913 Pip_Prop <> s var
def 5102:5133 <> currentPartitionIsNotDefaultPage
R5140:5144 Pip_state <> state rec
R5151:5151 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R5170:5174 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R5152:5167 Pip_state <> currentPartition proj
R5169:5169 Pip_Prop <> s var
R5175:5185 Pip_state <> defaultPage def
def 5406:5426 <> parentInPartitionList
R5433:5437 Pip_state <> state rec
R5504:5508 Coq.Init.Logic <> :type_scope:x_'->'_x not
R5563:5566 Coq.Init.Logic <> :type_scope:x_'->'_x not
R5567:5568 Coq.Lists.List <> In def
R5578:5590 Pip_stateLib <> getPartitions def
R5604:5604 Pip_Prop <> s var
R5592:5602 Pip_state <> multiplexer def
R5570:5575 Pip_Prop <> parent var
R5524:5536 Pip_stateLib <> nextEntryIsPP def
R5562:5562 Pip_Prop <> s var
R5555:5560 Pip_Prop <> parent var
R5548:5553 Pip_state <> PPRidx def
R5538:5546 Pip_Prop <> partition var
R5462:5463 Coq.Lists.List <> In def
R5476:5488 Pip_stateLib <> getPartitions def
R5502:5502 Pip_Prop <> s var
R5490:5500 Pip_state <> multiplexer def
R5465:5473 Pip_Prop <> partition var
def 6055:6078 <> partitionDescriptorEntry
R6106:6109 Pip_state <> page rec
R6157:6161 Coq.Init.Logic <> :type_scope:x_'->'_x not
R6180:6184 Pip_state <> index rec
R6188:6188 Coq.Init.Logic <> :type_scope:x_'->'_x not
R6305:6310 Coq.Init.Logic <> :type_scope:x_'->'_x not
R6334:6338 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6318:6320 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R6311:6317 Pip_Prop <> idxroot var
R6330:6332 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R6321:6329 Pip_state <> tableSize prfax
R6364:6368 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6339:6342 Pip_stateLib <> isVA def
R6363:6363 Pip_Prop <> s var
R6354:6360 Pip_Prop <> idxroot var
R6344:6352 Pip_Prop <> partition var
R6369:6375 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6381:6382 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6422:6428 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6383:6395 Pip_stateLib <> nextEntryIsPP def
R6421:6421 Pip_Prop <> s var
R6415:6419 Pip_Prop <> entry var
R6407:6413 Pip_Prop <> idxroot var
R6397:6405 Pip_Prop <> partition var
R6434:6437 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R6429:6433 Pip_Prop <> entry var
R6438:6448 Pip_state <> defaultPage def
R6204:6207 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6196:6198 Coq.Init.Logic <> :type_scope:x_'='_x not
R6189:6195 Pip_Prop <> idxroot var
R6199:6203 Pip_state <> PDidx def
R6224:6227 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6215:6217 Coq.Init.Logic <> :type_scope:x_'='_x not
R6208:6214 Pip_Prop <> idxroot var
R6218:6223 Pip_state <> sh1idx def
R6244:6248 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6235:6237 Coq.Init.Logic <> :type_scope:x_'='_x not
R6228:6234 Pip_Prop <> idxroot var
R6238:6243 Pip_state <> sh2idx def
R6265:6268 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6256:6258 Coq.Init.Logic <> :type_scope:x_'='_x not
R6249:6255 Pip_Prop <> idxroot var
R6259:6264 Pip_state <> sh3idx def
R6285:6289 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6276:6278 Coq.Init.Logic <> :type_scope:x_'='_x not
R6269:6275 Pip_Prop <> idxroot var
R6279:6284 Pip_state <> PPRidx def
R6297:6299 Coq.Init.Logic <> :type_scope:x_'='_x not
R6290:6296 Pip_Prop <> idxroot var
R6300:6304 Pip_state <> PRidx def
R6115:6116 Coq.Lists.List <> In def
R6129:6141 Pip_stateLib <> getPartitions def
R6155:6155 Pip_Prop <> s var
R6143:6153 Pip_state <> multiplexer def
R6118:6126 Pip_Prop <> partition var
def 6569:6592 <> multiplexerWithoutParent
R6631:6633 Coq.Init.Logic <> :type_scope:x_'='_x not
R6599:6607 Pip_stateLib <> getParent def
R6622:6627 Pip_state <> memory proj
R6629:6629 Pip_Prop <> s var
R6609:6619 Pip_state <> multiplexer def
R6634:6637 Coq.Init.Datatypes <> None constr
def 6765:6784 <> noDupMappedPagesList
R6811:6814 Pip_state <> page rec
R6862:6868 Coq.Init.Logic <> :type_scope:x_'->'_x not
R6869:6873 Coq.Lists.List <> NoDup ind
R6876:6889 Pip_stateLib <> getMappedPages def
R6901:6901 Pip_Prop <> s var
R6891:6899 Pip_Prop <> partition var
R6820:6821 Coq.Lists.List <> In def
R6834:6846 Pip_stateLib <> getPartitions def
R6860:6860 Pip_Prop <> s var
R6848:6858 Pip_state <> multiplexer def
R6823:6831 Pip_Prop <> partition var
def 7038:7057 <> noDupConfigPagesList
R7080:7080 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7136:7141 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7162:7165 Pip_state <> page rec
R7213:7217 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7269:7272 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7273:7277 Coq.Lists.List <> NoDup ind
R7280:7294 Pip_stateLib <> getIndirections def
R7301:7301 Pip_Prop <> s var
R7296:7299 Pip_Prop <> root var
R7231:7243 Pip_stateLib <> nextEntryIsPP def
R7268:7268 Pip_Prop <> s var
R7263:7266 Pip_Prop <> root var
R7255:7261 Pip_Prop <> idxroot var
R7245:7253 Pip_Prop <> partition var
R7171:7172 Coq.Lists.List <> In def
R7185:7197 Pip_stateLib <> getPartitions def
R7211:7211 Pip_Prop <> s var
R7199:7209 Pip_state <> multiplexer def
R7174:7182 Pip_Prop <> partition var
R7096:7099 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R7088:7090 Coq.Init.Logic <> :type_scope:x_'='_x not
R7081:7087 Pip_Prop <> idxroot var
R7091:7095 Pip_state <> PDidx def
R7116:7119 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R7107:7109 Coq.Init.Logic <> :type_scope:x_'='_x not
R7100:7106 Pip_Prop <> idxroot var
R7110:7115 Pip_state <> sh1idx def
R7127:7129 Coq.Init.Logic <> :type_scope:x_'='_x not
R7120:7126 Pip_Prop <> idxroot var
R7130:7135 Pip_state <> sh2idx def
def 7516:7551 <> accessibleVAIsNotPartitionDescriptor
R7636:7642 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7679:7685 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7730:7736 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7780:7786 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7805:7807 Coq.Init.Logic <> :type_scope:x_'='_x not
R7787:7795 Pip_stateLib <> getPDFlag def
R7804:7804 Pip_Prop <> s var
R7801:7802 Pip_Prop <> va var
R7797:7799 Pip_Prop <> sh1 var
R7808:7812 Coq.Init.Datatypes <> false constr
R7768:7770 Coq.Init.Logic <> :type_scope:x_'='_x not
R7737:7759 Pip_stateLib <> getAccessibleMappedPage def
R7766:7767 Pip_Prop <> va var
R7764:7764 Pip_Prop <> s var
R7761:7762 Pip_Prop <> pd var
R7771:7774 Coq.Init.Datatypes <> Some constr
R7776:7779 Pip_Prop <> page var
R7719:7721 Coq.Init.Logic <> :type_scope:x_'='_x not
R7686:7697 Pip_stateLib <> getFstShadow def
R7710:7715 Pip_state <> memory proj
R7717:7717 Pip_Prop <> s var
R7699:7707 Pip_Prop <> partition var
R7722:7725 Coq.Init.Datatypes <> Some constr
R7727:7729 Pip_Prop <> sh1 var
R7669:7671 Coq.Init.Logic <> :type_scope:x_'='_x not
R7643:7647 Pip_stateLib <> getPd def
R7660:7665 Pip_state <> memory proj
R7667:7667 Pip_Prop <> s var
R7649:7657 Pip_Prop <> partition var
R7672:7675 Coq.Init.Datatypes <> Some constr
R7677:7678 Pip_Prop <> pd var
R7594:7595 Coq.Lists.List <> In def
R7608:7620 Pip_stateLib <> getPartitions def
R7634:7634 Pip_Prop <> s var
R7622:7632 Pip_state <> multiplexer def
R7597:7605 Pip_Prop <> partition var
def 8005:8045 <> accessibleChildPageIsAccessibleIntoParent
R8138:8143 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8180:8185 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8239:8244 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8305:8307 Coq.Init.Logic <> :type_scope:x_'='_x not
R8245:8274 Pip_stateLib <> isAccessibleMappedPageInParent def
R8304:8304 Pip_Prop <> s var
R8289:8302 Pip_Prop <> accessiblePage var
R8286:8287 Pip_Prop <> va var
R8276:8284 Pip_Prop <> partition var
R8308:8311 Coq.Init.Datatypes <> true constr
R8217:8219 Coq.Init.Logic <> :type_scope:x_'='_x not
R8186:8208 Pip_stateLib <> getAccessibleMappedPage def
R8215:8216 Pip_Prop <> va var
R8213:8213 Pip_Prop <> s var
R8210:8211 Pip_Prop <> pd var
R8220:8223 Coq.Init.Datatypes <> Some constr
R8225:8238 Pip_Prop <> accessiblePage var
R8170:8172 Coq.Init.Logic <> :type_scope:x_'='_x not
R8144:8148 Pip_stateLib <> getPd def
R8161:8166 Pip_state <> memory proj
R8168:8168 Pip_Prop <> s var
R8150:8158 Pip_Prop <> partition var
R8173:8176 Coq.Init.Datatypes <> Some constr
R8178:8179 Pip_Prop <> pd var
R8096:8097 Coq.Lists.List <> In def
R8110:8122 Pip_stateLib <> getPartitions def
R8136:8136 Pip_Prop <> s var
R8124:8134 Pip_state <> multiplexer def
R8099:8107 Pip_Prop <> partition var
def 8443:8464 <> noCycleInPartitionTree
R8542:8546 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8585:8589 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8598:8601 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R8590:8597 Pip_Prop <> ancestor var
R8602:8610 Pip_Prop <> partition var
R8547:8548 Coq.Lists.List <> In def
R8560:8571 Pip_stateLib <> getAncestors def
R8583:8583 Pip_Prop <> s var
R8573:8581 Pip_Prop <> partition var
R8550:8557 Pip_Prop <> ancestor var
R8500:8501 Coq.Lists.List <> In def
R8514:8526 Pip_stateLib <> getPartitions def
R8540:8540 Pip_Prop <> s var
R8528:8538 Pip_state <> multiplexer def
R8503:8511 Pip_Prop <> partition var
def 8757:8780 <> configTablesAreDifferent
R8861:8865 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8909:8913 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8938:8942 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8943:8950 Lib <> disjoint def
R8983:8996 Pip_stateLib <> getConfigPages def
R9009:9009 Pip_Prop <> s var
R8998:9007 Pip_Prop <> partition2 var
R8953:8966 Pip_stateLib <> getConfigPages def
R8979:8979 Pip_Prop <> s var
R8968:8977 Pip_Prop <> partition1 var
R8924:8927 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R8914:8923 Pip_Prop <> partition1 var
R8928:8937 Pip_Prop <> partition2 var
R8866:8867 Coq.Lists.List <> In def
R8881:8893 Pip_stateLib <> getPartitions def
R8907:8907 Pip_Prop <> s var
R8895:8905 Pip_state <> multiplexer def
R8869:8878 Pip_Prop <> partition2 var
R8818:8819 Coq.Lists.List <> In def
R8833:8845 Pip_stateLib <> getPartitions def
R8859:8859 Pip_Prop <> s var
R8847:8857 Pip_state <> multiplexer def
R8821:8830 Pip_Prop <> partition1 var
def 9199:9205 <> isChild
R9239:9242 Pip_state <> page rec
R9287:9291 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9336:9340 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9341:9342 Coq.Lists.List <> In def
R9355:9365 Pip_stateLib <> getChildren def
R9374:9374 Pip_Prop <> s var
R9367:9372 Pip_Prop <> parent var
R9344:9352 Pip_Prop <> partition var
R9322:9324 Coq.Init.Logic <> :type_scope:x_'='_x not
R9292:9300 Pip_stateLib <> getParent def
R9313:9318 Pip_state <> memory proj
R9320:9320 Pip_Prop <> s var
R9302:9310 Pip_Prop <> partition var
R9325:9328 Coq.Init.Datatypes <> Some constr
R9330:9335 Pip_Prop <> parent var
R9245:9246 Coq.Lists.List <> In def
R9259:9271 Pip_stateLib <> getPartitions def
R9285:9285 Pip_Prop <> s var
R9273:9283 Pip_state <> multiplexer def
R9248:9256 Pip_Prop <> partition var
def 9578:9585 <> isParent
R9619:9622 Pip_state <> page rec
R9664:9668 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9704:9708 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9739:9741 Coq.Init.Logic <> :type_scope:x_'='_x not
R9709:9717 Pip_stateLib <> getParent def
R9730:9735 Pip_state <> memory proj
R9737:9737 Pip_Prop <> s var
R9719:9727 Pip_Prop <> partition var
R9742:9745 Coq.Init.Datatypes <> Some constr
R9747:9752 Pip_Prop <> parent var
R9669:9670 Coq.Lists.List <> In def
R9683:9693 Pip_stateLib <> getChildren def
R9702:9702 Pip_Prop <> s var
R9695:9700 Pip_Prop <> parent var
R9672:9680 Pip_Prop <> partition var
R9625:9626 Coq.Lists.List <> In def
R9636:9648 Pip_stateLib <> getPartitions def
R9662:9662 Pip_Prop <> s var
R9650:9660 Pip_state <> multiplexer def
R9628:9633 Pip_Prop <> parent var
def 9967:9988 <> isPresentNotDefaultIff
R10060:10066 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R10047:10049 Coq.Init.Logic <> :type_scope:x_'='_x not
R10015:10025 Pip_stateLib <> readPresent def
R10038:10043 Pip_state <> memory proj
R10045:10045 Pip_Prop <> s var
R10033:10035 Pip_Prop <> idx var
R10027:10031 Pip_Prop <> table var
R10050:10053 Coq.Init.Datatypes <> Some constr
R10055:10059 Coq.Init.Datatypes <> false constr
R10100:10102 Coq.Init.Logic <> :type_scope:x_'='_x not
R10067:10078 Pip_stateLib <> readPhyEntry def
R10091:10096 Pip_state <> memory proj
R10098:10098 Pip_Prop <> s var
R10086:10088 Pip_Prop <> idx var
R10080:10084 Pip_Prop <> table var
R10103:10106 Coq.Init.Datatypes <> Some constr
R10108:10118 Pip_state <> defaultPage def
def 10298:10319 <> physicalPageNotDerived
R10405:10409 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10449:10453 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10477:10481 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10527:10531 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10607:10611 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10649:10653 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10705:10709 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10720:10723 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R10710:10719 Pip_Prop <> pageParent var
R10724:10732 Pip_Prop <> pageChild var
R10687:10689 Coq.Init.Logic <> :type_scope:x_'='_x not
R10654:10666 Pip_stateLib <> getMappedPage def
R10678:10686 Pip_Prop <> vaInChild var
R10676:10676 Pip_Prop <> s var
R10668:10674 Pip_Prop <> pdChild var
R10690:10693 Coq.Init.Datatypes <> Some constr
R10696:10704 Pip_Prop <> pageChild var
R10634:10636 Coq.Init.Logic <> :type_scope:x_'='_x not
R10612:10616 Pip_stateLib <> getPd def
R10625:10630 Pip_state <> memory proj
R10632:10632 Pip_Prop <> s var
R10618:10622 Pip_Prop <> child var
R10637:10640 Coq.Init.Datatypes <> Some constr
R10642:10648 Pip_Prop <> pdChild var
R10576:10577 Coq.Lists.List <> In def
R10586:10596 Pip_stateLib <> getChildren def
R10605:10605 Pip_Prop <> s var
R10598:10603 Pip_Prop <> parent var
R10579:10583 Pip_Prop <> child var
R10509:10511 Coq.Init.Logic <> :type_scope:x_'='_x not
R10482:10494 Pip_stateLib <> getMappedPage def
R10507:10508 Pip_Prop <> va var
R10505:10505 Pip_Prop <> s var
R10496:10503 Pip_Prop <> pdParent var
R10512:10515 Coq.Init.Datatypes <> Some constr
R10517:10526 Pip_Prop <> pageParent var
R10454:10455 Coq.Init.Logic <> :type_scope:'~'_x not
R10456:10464 Pip_stateLib <> isDerived def
R10476:10476 Pip_Prop <> s var
R10473:10474 Pip_Prop <> va var
R10466:10471 Pip_Prop <> parent var
R10433:10435 Coq.Init.Logic <> :type_scope:x_'='_x not
R10410:10414 Pip_stateLib <> getPd def
R10424:10429 Pip_state <> memory proj
R10431:10431 Pip_Prop <> s var
R10416:10421 Pip_Prop <> parent var
R10436:10439 Coq.Init.Datatypes <> Some constr
R10441:10448 Pip_Prop <> pdParent var
R10366:10367 Coq.Lists.List <> In def
R10377:10389 Pip_stateLib <> getPartitions def
R10403:10403 Pip_Prop <> s var
R10391:10401 Pip_state <> multiplexer def
R10369:10374 Pip_Prop <> parent var
def 10747:10764 <> noDupPartitionTree
R10771:10775 Coq.Lists.List <> NoDup ind
R10778:10790 Pip_stateLib <> getPartitions def
R10804:10804 Pip_Prop <> s var
R10792:10802 Pip_state <> multiplexer def
def 10873:10883 <> consistency
R10918:10924 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R10892:10915 Pip_Prop <> partitionDescriptorEntry def
R10917:10917 Pip_Prop <> s var
R10960:10964 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R10925:10951 Pip_Prop <> dataStructurePdSh1Sh2asRoot def
R10959:10959 Pip_Prop <> s var
R10953:10957 Pip_state <> PDidx def
R11001:11005 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R10965:10991 Pip_Prop <> dataStructurePdSh1Sh2asRoot def
R11000:11000 Pip_Prop <> s var
R10993:10998 Pip_state <> sh1idx def
R11042:11046 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11006:11032 Pip_Prop <> dataStructurePdSh1Sh2asRoot def
R11041:11041 Pip_Prop <> s var
R11034:11039 Pip_state <> sh2idx def
R11081:11085 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11047:11078 Pip_Prop <> currentPartitionInPartitionsList def
R11080:11080 Pip_Prop <> s var
R11108:11112 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11086:11105 Pip_Prop <> noDupMappedPagesList def
R11107:11107 Pip_Prop <> s var
R11135:11140 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11113:11132 Pip_Prop <> noDupConfigPagesList def
R11134:11134 Pip_Prop <> s var
R11164:11168 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11141:11161 Pip_Prop <> parentInPartitionList def
R11163:11163 Pip_Prop <> s var
R11207:11211 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11169:11204 Pip_Prop <> accessibleVAIsNotPartitionDescriptor def
R11206:11206 Pip_Prop <> s var
R11255:11259 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11212:11252 Pip_Prop <> accessibleChildPageIsAccessibleIntoParent def
R11254:11254 Pip_Prop <> s var
R11284:11289 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11260:11281 Pip_Prop <> noCycleInPartitionTree def
R11283:11283 Pip_Prop <> s var
R11316:11321 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11290:11313 Pip_Prop <> configTablesAreDifferent def
R11315:11315 Pip_Prop <> s var
R11331:11335 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11322:11328 Pip_Prop <> isChild def
R11330:11330 Pip_Prop <> s var
R11360:11364 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11336:11357 Pip_Prop <> isPresentNotDefaultIff def
R11359:11359 Pip_Prop <> s var
R11389:11393 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11365:11386 Pip_Prop <> physicalPageNotDerived def
R11388:11388 Pip_Prop <> s var
R11420:11424 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11394:11417 Pip_Prop <> multiplexerWithoutParent def
R11419:11419 Pip_Prop <> s var
R11435:11439 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11425:11432 Pip_Prop <> isParent def
R11434:11434 Pip_Prop <> s var
R11460:11464 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11440:11457 Pip_Prop <> noDupPartitionTree def
R11459:11459 Pip_Prop <> s var
R11486:11490 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11465:11483 Pip_Prop <> wellFormedFstShadow def
R11485:11485 Pip_Prop <> s var
R11512:11516 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11491:11509 Pip_Prop <> wellFormedSndShadow def
R11511:11511 Pip_Prop <> s var
R11543:11547 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11517:11533 Pip_Prop <> wellFormedShadows def
R11542:11542 Pip_Prop <> s var
R11535:11540 Pip_state <> sh1idx def
R11574:11578 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11548:11564 Pip_Prop <> wellFormedShadows def
R11573:11573 Pip_Prop <> s var
R11566:11571 Pip_state <> sh2idx def
R11579:11610 Pip_Prop <> currentPartitionIsNotDefaultPage def
R11612:11612 Pip_Prop <> s var
def 11628:11647 <> propagatedProperties
R12249:12252 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12228:12246 Pip_Prop <> partitionsIsolation def
R12248:12248 Pip_Prop <> s var
R12274:12277 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12253:12271 Pip_Prop <> kernelDataIsolation def
R12273:12273 Pip_Prop <> s var
R12295:12298 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12278:12292 Pip_Prop <> verticalSharing def
R12294:12294 Pip_Prop <> s var
R12312:12315 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12299:12309 Pip_Prop <> consistency def
R12311:12311 Pip_Prop <> s var
R12339:12342 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12326:12328 Coq.Init.Logic <> :type_scope:x_'='_x not
R12316:12319 Coq.Init.Datatypes <> Some constr
R12321:12325 Pip_Prop <> level var
R12329:12338 Pip_stateLib <> getNbLevel def
R12410:12413 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12348:12350 Coq.Init.Logic <> :type_scope:x_'='_x not
R12343:12347 Coq.Init.Datatypes <> false constr
R12351:12377 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12405:12409 Pip_Prop <> level var
R12397:12403 Pip_Prop <> pdChild var
R12387:12395 Pip_Prop <> descChild var
R12379:12385 Pip_state <> nbLevel prfax
R12481:12484 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12419:12421 Coq.Init.Logic <> :type_scope:x_'='_x not
R12414:12418 Coq.Init.Datatypes <> false constr
R12422:12448 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12476:12480 Pip_Prop <> level var
R12468:12474 Pip_Prop <> shadow1 var
R12458:12466 Pip_Prop <> descChild var
R12450:12456 Pip_state <> nbLevel prfax
R12552:12555 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12490:12492 Coq.Init.Logic <> :type_scope:x_'='_x not
R12485:12489 Coq.Init.Datatypes <> false constr
R12493:12519 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12547:12551 Pip_Prop <> level var
R12539:12545 Pip_Prop <> shadow2 var
R12529:12537 Pip_Prop <> descChild var
R12521:12527 Pip_state <> nbLevel prfax
R12620:12623 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12561:12563 Coq.Init.Logic <> :type_scope:x_'='_x not
R12556:12560 Coq.Init.Datatypes <> false constr
R12564:12590 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12615:12619 Pip_Prop <> level var
R12610:12613 Pip_Prop <> list var
R12600:12608 Pip_Prop <> descChild var
R12592:12598 Pip_state <> nbLevel prfax
R12689:12692 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12629:12631 Coq.Init.Logic <> :type_scope:x_'='_x not
R12624:12628 Coq.Init.Datatypes <> false constr
R12632:12658 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12684:12688 Pip_Prop <> level var
R12676:12682 Pip_Prop <> shadow1 var
R12668:12674 Pip_Prop <> pdChild var
R12660:12666 Pip_state <> nbLevel prfax
R12758:12761 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12698:12700 Coq.Init.Logic <> :type_scope:x_'='_x not
R12693:12697 Coq.Init.Datatypes <> false constr
R12701:12727 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12753:12757 Pip_Prop <> level var
R12745:12751 Pip_Prop <> shadow2 var
R12737:12743 Pip_Prop <> pdChild var
R12729:12735 Pip_state <> nbLevel prfax
R12824:12827 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12767:12769 Coq.Init.Logic <> :type_scope:x_'='_x not
R12762:12766 Coq.Init.Datatypes <> false constr
R12770:12796 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12819:12823 Pip_Prop <> level var
R12814:12817 Pip_Prop <> list var
R12806:12812 Pip_Prop <> pdChild var
R12798:12804 Pip_state <> nbLevel prfax
R12893:12896 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12833:12835 Coq.Init.Logic <> :type_scope:x_'='_x not
R12828:12832 Coq.Init.Datatypes <> false constr
R12836:12862 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12888:12892 Pip_Prop <> level var
R12880:12886 Pip_Prop <> shadow2 var
R12872:12878 Pip_Prop <> shadow1 var
R12864:12870 Pip_state <> nbLevel prfax
R12959:12962 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12902:12904 Coq.Init.Logic <> :type_scope:x_'='_x not
R12897:12901 Coq.Init.Datatypes <> false constr
R12905:12931 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R12954:12958 Pip_Prop <> level var
R12949:12952 Pip_Prop <> list var
R12941:12947 Pip_Prop <> shadow1 var
R12933:12939 Pip_state <> nbLevel prfax
R13025:13028 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12968:12970 Coq.Init.Logic <> :type_scope:x_'='_x not
R12963:12967 Coq.Init.Datatypes <> false constr
R12971:12997 Pip_stateLib <> checkVAddrsEqualityWOOffset def
R13020:13024 Pip_Prop <> level var
R13015:13018 Pip_Prop <> list var
R13007:13013 Pip_Prop <> shadow2 var
R12999:13005 Pip_state <> nbLevel prfax
R13112:13115 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13029:13029 Coq.Init.Logic <> :type_scope:x_'='_x not
R13103:13106 Coq.Init.Logic <> :type_scope:x_'='_x not
R13034:13037 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R13030:13033 Pip_state <> Kidx def
R13038:13040 Coq.Lists.List <> nth def
R13091:13102 Pip_state <> defaultIndex def
R13081:13089 Pip_Prop <> descChild var
R13059:13062 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13078:13078 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13043:13048 Coq.Init.Datatypes <> length def
R13050:13058 Pip_Prop <> descChild var
R13074:13076 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R13070:13072 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13063:13069 Pip_state <> nbLevel prfax
R13107:13111 Coq.Init.Datatypes <> false constr
R13195:13198 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13116:13116 Coq.Init.Logic <> :type_scope:x_'='_x not
R13186:13189 Coq.Init.Logic <> :type_scope:x_'='_x not
R13121:13124 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R13117:13120 Pip_state <> Kidx def
R13125:13127 Coq.Lists.List <> nth def
R13174:13185 Pip_state <> defaultIndex def
R13166:13172 Pip_Prop <> pdChild var
R13144:13147 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13163:13163 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13130:13135 Coq.Init.Datatypes <> length def
R13137:13143 Pip_Prop <> pdChild var
R13159:13161 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R13155:13157 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13148:13154 Pip_state <> nbLevel prfax
R13190:13194 Coq.Init.Datatypes <> false constr
R13278:13281 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13199:13199 Coq.Init.Logic <> :type_scope:x_'='_x not
R13269:13272 Coq.Init.Logic <> :type_scope:x_'='_x not
R13204:13207 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R13200:13203 Pip_state <> Kidx def
R13208:13210 Coq.Lists.List <> nth def
R13257:13268 Pip_state <> defaultIndex def
R13249:13255 Pip_Prop <> shadow1 var
R13227:13230 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13246:13246 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13213:13218 Coq.Init.Datatypes <> length def
R13220:13226 Pip_Prop <> shadow1 var
R13242:13244 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R13238:13240 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13231:13237 Pip_state <> nbLevel prfax
R13273:13277 Coq.Init.Datatypes <> false constr
R13361:13364 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13282:13282 Coq.Init.Logic <> :type_scope:x_'='_x not
R13352:13355 Coq.Init.Logic <> :type_scope:x_'='_x not
R13287:13290 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R13283:13286 Pip_state <> Kidx def
R13291:13293 Coq.Lists.List <> nth def
R13340:13351 Pip_state <> defaultIndex def
R13332:13338 Pip_Prop <> shadow2 var
R13310:13313 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13329:13329 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13296:13301 Coq.Init.Datatypes <> length def
R13303:13309 Pip_Prop <> shadow2 var
R13325:13327 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R13321:13323 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13314:13320 Pip_state <> nbLevel prfax
R13356:13360 Coq.Init.Datatypes <> false constr
R13438:13441 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13365:13365 Coq.Init.Logic <> :type_scope:x_'='_x not
R13429:13432 Coq.Init.Logic <> :type_scope:x_'='_x not
R13370:13373 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R13366:13369 Pip_state <> Kidx def
R13374:13376 Coq.Lists.List <> nth def
R13417:13428 Pip_state <> defaultIndex def
R13412:13415 Pip_Prop <> list var
R13390:13393 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13409:13409 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13379:13384 Coq.Init.Datatypes <> length def
R13386:13389 Pip_Prop <> list var
R13405:13407 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R13401:13403 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R13394:13400 Pip_state <> nbLevel prfax
R13433:13437 Coq.Init.Datatypes <> false constr
R13479:13483 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13471:13473 Coq.Init.Logic <> :type_scope:x_'='_x not
R13442:13449 Pip_state <> beqVAddr def
R13464:13470 Pip_Prop <> pdChild var
R13451:13462 Pip_state <> defaultVAddr def
R13474:13478 Coq.Init.Datatypes <> false constr
R13521:13524 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13513:13515 Coq.Init.Logic <> :type_scope:x_'='_x not
R13484:13491 Pip_state <> beqVAddr def
R13506:13512 Pip_Prop <> shadow1 var
R13493:13504 Pip_state <> defaultVAddr def
R13516:13520 Coq.Init.Datatypes <> false constr
R13562:13566 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13554:13556 Coq.Init.Logic <> :type_scope:x_'='_x not
R13525:13532 Pip_state <> beqVAddr def
R13547:13553 Pip_Prop <> shadow2 var
R13534:13545 Pip_state <> defaultVAddr def
R13557:13561 Coq.Init.Datatypes <> false constr
R13601:13604 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13593:13595 Coq.Init.Logic <> :type_scope:x_'='_x not
R13567:13574 Pip_state <> beqVAddr def
R13589:13592 Pip_Prop <> list var
R13576:13587 Pip_state <> defaultVAddr def
R13596:13600 Coq.Init.Datatypes <> false constr
R13637:13640 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13616:13618 Coq.Init.Logic <> :type_scope:x_'='_x not
R13605:13615 Pip_Prop <> currentPart var
R13619:13634 Pip_state <> currentPartition proj
R13636:13636 Pip_Prop <> s var
R13684:13687 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13641:13653 Pip_stateLib <> nextEntryIsPP def
R13683:13683 Pip_Prop <> s var
R13673:13681 Pip_Prop <> currentPD var
R13667:13671 Pip_state <> PDidx def
R13655:13665 Pip_Prop <> currentPart var
R13688:13688 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13834:13838 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13702:13706 Pip_state <> index rec
R13748:13751 Coq.Init.Logic <> :type_scope:x_'->'_x not
R13773:13776 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13752:13755 Pip_stateLib <> isPE def
R13772:13772 Pip_Prop <> s var
R13768:13770 Pip_Prop <> idx var
R13757:13766 Pip_Prop <> ptRefChild var
R13777:13792 Pip_stateLib <> getTableAddrRoot def
R13833:13833 Pip_Prop <> s var
R13823:13831 Pip_Prop <> descChild var
R13811:13821 Pip_Prop <> currentPart var
R13805:13809 Pip_state <> PDidx def
R13794:13803 Pip_Prop <> ptRefChild var
R13742:13744 Coq.Init.Logic <> :type_scope:x_'='_x not
R13709:13722 Pip_stateLib <> getIndexOfAddr def
R13734:13741 Pip_state <> fstLevel def
R13724:13732 Pip_Prop <> descChild var
R13745:13747 Pip_Prop <> idx var
R13874:13877 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13839:13839 Coq.Init.Logic <> :type_scope:x_'='_x not
R13865:13868 Coq.Init.Logic <> :type_scope:x_'='_x not
R13851:13854 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R13840:13850 Pip_state <> defaultPage def
R13855:13864 Pip_Prop <> ptRefChild var
R13869:13873 Coq.Init.Datatypes <> false constr
R13925:13928 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13911:13913 Coq.Init.Logic <> :type_scope:x_'='_x not
R13878:13891 Pip_stateLib <> getIndexOfAddr def
R13903:13910 Pip_state <> fstLevel def
R13893:13901 Pip_Prop <> descChild var
R13914:13924 Pip_Prop <> idxRefChild var
R13986:13989 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13929:13944 Pip_stateLib <> entryPresentFlag def
R13985:13985 Pip_Prop <> s var
R13969:13983 Pip_Prop <> presentRefChild var
R13957:13967 Pip_Prop <> idxRefChild var
R13946:13955 Pip_Prop <> ptRefChild var
R14044:14047 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13990:14002 Pip_stateLib <> entryUserFlag def
R14043:14043 Pip_Prop <> s var
R14027:14041 Pip_Prop <> accessibleChild var
R14015:14025 Pip_Prop <> idxRefChild var
R14004:14013 Pip_Prop <> ptRefChild var
R14048:14048 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14188:14192 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14062:14066 Pip_state <> index rec
R14106:14109 Coq.Init.Logic <> :type_scope:x_'->'_x not
R14130:14133 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14110:14113 Pip_stateLib <> isPE def
R14129:14129 Pip_Prop <> s var
R14125:14127 Pip_Prop <> idx var
R14115:14123 Pip_Prop <> ptPDChild var
R14134:14149 Pip_stateLib <> getTableAddrRoot def
R14187:14187 Pip_Prop <> s var
R14179:14185 Pip_Prop <> pdChild var
R14167:14177 Pip_Prop <> currentPart var
R14161:14165 Pip_state <> PDidx def
R14151:14159 Pip_Prop <> ptPDChild var
R14100:14102 Coq.Init.Logic <> :type_scope:x_'='_x not
R14069:14082 Pip_stateLib <> getIndexOfAddr def
R14092:14099 Pip_state <> fstLevel def
R14084:14090 Pip_Prop <> pdChild var
R14103:14105 Pip_Prop <> idx var
R14227:14230 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14193:14193 Coq.Init.Logic <> :type_scope:x_'='_x not
R14218:14221 Coq.Init.Logic <> :type_scope:x_'='_x not
R14205:14208 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R14194:14204 Pip_state <> defaultPage def
R14209:14217 Pip_Prop <> ptPDChild var
R14222:14226 Coq.Init.Datatypes <> false constr
R14275:14278 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14262:14264 Coq.Init.Logic <> :type_scope:x_'='_x not
R14231:14244 Pip_stateLib <> getIndexOfAddr def
R14254:14261 Pip_state <> fstLevel def
R14246:14252 Pip_Prop <> pdChild var
R14265:14274 Pip_Prop <> idxPDChild var
R14333:14336 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14279:14294 Pip_stateLib <> entryPresentFlag def
R14332:14332 Pip_Prop <> s var
R14317:14330 Pip_Prop <> presentPDChild var
R14306:14315 Pip_Prop <> idxPDChild var
R14296:14304 Pip_Prop <> ptPDChild var
R14379:14382 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14337:14349 Pip_stateLib <> entryUserFlag def
R14378:14378 Pip_Prop <> s var
R14372:14376 Coq.Init.Datatypes <> false constr
R14361:14370 Pip_Prop <> idxPDChild var
R14351:14359 Pip_Prop <> ptPDChild var
R14383:14383 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14525:14529 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14397:14401 Pip_state <> index rec
R14441:14444 Coq.Init.Logic <> :type_scope:x_'->'_x not
R14466:14469 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14445:14448 Pip_stateLib <> isPE def
R14465:14465 Pip_Prop <> s var
R14461:14463 Pip_Prop <> idx var
R14450:14459 Pip_Prop <> ptSh1Child var
R14470:14485 Pip_stateLib <> getTableAddrRoot def
R14524:14524 Pip_Prop <> s var
R14516:14522 Pip_Prop <> shadow1 var
R14504:14514 Pip_Prop <> currentPart var
R14498:14502 Pip_state <> PDidx def
R14487:14496 Pip_Prop <> ptSh1Child var
R14435:14437 Coq.Init.Logic <> :type_scope:x_'='_x not
R14404:14417 Pip_stateLib <> getIndexOfAddr def
R14427:14434 Pip_state <> fstLevel def
R14419:14425 Pip_Prop <> shadow1 var
R14438:14440 Pip_Prop <> idx var
R14565:14568 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14530:14530 Coq.Init.Logic <> :type_scope:x_'='_x not
R14556:14559 Coq.Init.Logic <> :type_scope:x_'='_x not
R14542:14545 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R14531:14541 Pip_state <> defaultPage def
R14546:14555 Pip_Prop <> ptSh1Child var
R14560:14564 Coq.Init.Datatypes <> false constr
R14609:14612 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14600:14602 Coq.Init.Logic <> :type_scope:x_'='_x not
R14569:14582 Pip_stateLib <> getIndexOfAddr def
R14592:14599 Pip_state <> fstLevel def
R14584:14590 Pip_Prop <> shadow1 var
R14603:14608 Pip_Prop <> idxSh1 var
R14660:14663 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14613:14628 Pip_stateLib <> entryPresentFlag def
R14659:14659 Pip_Prop <> s var
R14648:14657 Pip_Prop <> presentSh1 var
R14641:14646 Pip_Prop <> idxSh1 var
R14630:14639 Pip_Prop <> ptSh1Child var
R14711:14714 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14664:14676 Pip_stateLib <> entryUserFlag def
R14710:14710 Pip_Prop <> s var
R14696:14708 Pip_Prop <> accessibleSh1 var
R14689:14694 Pip_Prop <> idxSh1 var
R14678:14687 Pip_Prop <> ptSh1Child var
R14715:14715 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14857:14861 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14729:14733 Pip_state <> index rec
R14773:14776 Coq.Init.Logic <> :type_scope:x_'->'_x not
R14798:14801 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14777:14780 Pip_stateLib <> isPE def
R14797:14797 Pip_Prop <> s var
R14793:14795 Pip_Prop <> idx var
R14782:14791 Pip_Prop <> ptSh2Child var
R14802:14817 Pip_stateLib <> getTableAddrRoot def
R14856:14856 Pip_Prop <> s var
R14848:14854 Pip_Prop <> shadow2 var
R14836:14846 Pip_Prop <> currentPart var
R14830:14834 Pip_state <> PDidx def
R14819:14828 Pip_Prop <> ptSh2Child var
R14767:14769 Coq.Init.Logic <> :type_scope:x_'='_x not
R14736:14749 Pip_stateLib <> getIndexOfAddr def
R14759:14766 Pip_state <> fstLevel def
R14751:14757 Pip_Prop <> shadow2 var
R14770:14772 Pip_Prop <> idx var
R14897:14900 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14862:14862 Coq.Init.Logic <> :type_scope:x_'='_x not
R14888:14891 Coq.Init.Logic <> :type_scope:x_'='_x not
R14874:14877 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R14863:14873 Pip_state <> defaultPage def
R14878:14887 Pip_Prop <> ptSh2Child var
R14892:14896 Coq.Init.Datatypes <> false constr
R14941:14944 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14932:14934 Coq.Init.Logic <> :type_scope:x_'='_x not
R14901:14914 Pip_stateLib <> getIndexOfAddr def
R14924:14931 Pip_state <> fstLevel def
R14916:14922 Pip_Prop <> shadow2 var
R14935:14940 Pip_Prop <> idxSh2 var
R14992:14995 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14945:14960 Pip_stateLib <> entryPresentFlag def
R14991:14991 Pip_Prop <> s var
R14980:14989 Pip_Prop <> presentSh2 var
R14973:14978 Pip_Prop <> idxSh2 var
R14962:14971 Pip_Prop <> ptSh2Child var
R15043:15046 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14996:15008 Pip_stateLib <> entryUserFlag def
R15042:15042 Pip_Prop <> s var
R15028:15040 Pip_Prop <> accessibleSh2 var
R15021:15026 Pip_Prop <> idxSh2 var
R15010:15019 Pip_Prop <> ptSh2Child var
R15047:15047 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15197:15201 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15061:15065 Pip_state <> index rec
R15102:15105 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15134:15137 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15106:15109 Pip_stateLib <> isPE def
R15133:15133 Pip_Prop <> s var
R15129:15131 Pip_Prop <> idx var
R15111:15127 Pip_Prop <> ptConfigPagesList var
R15138:15153 Pip_stateLib <> getTableAddrRoot def
R15196:15196 Pip_Prop <> s var
R15191:15194 Pip_Prop <> list var
R15179:15189 Pip_Prop <> currentPart var
R15173:15177 Pip_state <> PDidx def
R15155:15171 Pip_Prop <> ptConfigPagesList var
R15096:15098 Coq.Init.Logic <> :type_scope:x_'='_x not
R15068:15081 Pip_stateLib <> getIndexOfAddr def
R15088:15095 Pip_state <> fstLevel def
R15083:15086 Pip_Prop <> list var
R15099:15101 Pip_Prop <> idx var
R15244:15247 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15202:15202 Coq.Init.Logic <> :type_scope:x_'='_x not
R15235:15238 Coq.Init.Logic <> :type_scope:x_'='_x not
R15214:15217 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R15203:15213 Pip_state <> defaultPage def
R15218:15234 Pip_Prop <> ptConfigPagesList var
R15239:15243 Coq.Init.Datatypes <> false constr
R15297:15300 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15276:15278 Coq.Init.Logic <> :type_scope:x_'='_x not
R15248:15261 Pip_stateLib <> getIndexOfAddr def
R15268:15275 Pip_state <> fstLevel def
R15263:15266 Pip_Prop <> list var
R15279:15296 Pip_Prop <> idxConfigPagesList var
R15379:15382 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15301:15316 Pip_stateLib <> entryPresentFlag def
R15378:15378 Pip_Prop <> s var
R15355:15376 Pip_Prop <> presentConfigPagesList var
R15336:15353 Pip_Prop <> idxConfigPagesList var
R15318:15334 Pip_Prop <> ptConfigPagesList var
R15450:15453 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15383:15395 Pip_stateLib <> entryUserFlag def
R15449:15449 Pip_Prop <> s var
R15434:15447 Pip_Prop <> accessibleList var
R15415:15432 Pip_Prop <> idxConfigPagesList var
R15397:15413 Pip_Prop <> ptConfigPagesList var
R15503:15506 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15454:15466 Pip_stateLib <> nextEntryIsPP def
R15502:15502 Pip_Prop <> s var
R15487:15500 Pip_Prop <> currentShadow1 var
R15480:15485 Pip_state <> sh1idx def
R15468:15478 Pip_Prop <> currentPart var
R15507:15507 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15668:15672 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15521:15525 Pip_state <> index rec
R15567:15570 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15599:15602 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15571:15574 Pip_stateLib <> isVE def
R15598:15598 Pip_Prop <> s var
R15594:15596 Pip_Prop <> idx var
R15576:15592 Pip_Prop <> ptRefChildFromSh1 var
R15603:15618 Pip_stateLib <> getTableAddrRoot def
R15667:15667 Pip_Prop <> s var
R15657:15665 Pip_Prop <> descChild var
R15645:15655 Pip_Prop <> currentPart var
R15638:15643 Pip_state <> sh1idx def
R15620:15636 Pip_Prop <> ptRefChildFromSh1 var
R15561:15563 Coq.Init.Logic <> :type_scope:x_'='_x not
R15528:15541 Pip_stateLib <> getIndexOfAddr def
R15553:15560 Pip_state <> fstLevel def
R15543:15551 Pip_Prop <> descChild var
R15564:15566 Pip_Prop <> idx var
R15715:15718 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15673:15673 Coq.Init.Logic <> :type_scope:x_'='_x not
R15706:15709 Coq.Init.Logic <> :type_scope:x_'='_x not
R15685:15688 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R15674:15684 Pip_state <> defaultPage def
R15689:15705 Pip_Prop <> ptRefChildFromSh1 var
R15710:15714 Coq.Init.Datatypes <> false constr
R15719:15719 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15829:15833 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15720:15726 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R15737:15738 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R15732:15736 Pip_state <> vaddr rec
R15783:15786 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15739:15747 Pip_stateLib <> isEntryVA def
R15782:15782 Pip_Prop <> s var
R15779:15780 Pip_Prop <> va var
R15767:15777 Pip_Prop <> idxRefChild var
R15749:15765 Pip_Prop <> ptRefChildFromSh1 var
R15811:15813 Coq.Init.Logic <> :type_scope:x_'='_x not
R15787:15794 Pip_state <> beqVAddr def
R15809:15810 Pip_Prop <> va var
R15796:15807 Pip_state <> defaultVAddr def
R15814:15828 Pip_Prop <> derivedRefChild var
R15834:15834 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15981:15985 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15848:15852 Pip_state <> index rec
R15892:15895 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15919:15922 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15896:15899 Pip_stateLib <> isVE def
R15918:15918 Pip_Prop <> s var
R15914:15916 Pip_Prop <> idx var
R15901:15912 Pip_Prop <> ptPDChildSh1 var
R15923:15938 Pip_stateLib <> getTableAddrRoot def
R15980:15980 Pip_Prop <> s var
R15972:15978 Pip_Prop <> pdChild var
R15960:15970 Pip_Prop <> currentPart var
R15953:15958 Pip_state <> sh1idx def
R15940:15951 Pip_Prop <> ptPDChildSh1 var
R15886:15888 Coq.Init.Logic <> :type_scope:x_'='_x not
R15855:15868 Pip_stateLib <> getIndexOfAddr def
R15878:15885 Pip_state <> fstLevel def
R15870:15876 Pip_Prop <> pdChild var
R15889:15891 Pip_Prop <> idx var
R16023:16026 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15986:15986 Coq.Init.Logic <> :type_scope:x_'='_x not
R16014:16017 Coq.Init.Logic <> :type_scope:x_'='_x not
R15998:16001 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R15987:15997 Pip_state <> defaultPage def
R16002:16013 Pip_Prop <> ptPDChildSh1 var
R16018:16022 Coq.Init.Datatypes <> false constr
R16027:16027 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16130:16134 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16028:16034 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16045:16046 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16040:16044 Pip_state <> vaddr rec
R16085:16088 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16047:16055 Pip_stateLib <> isEntryVA def
R16084:16084 Pip_Prop <> s var
R16081:16082 Pip_Prop <> va var
R16070:16079 Pip_Prop <> idxPDChild var
R16057:16068 Pip_Prop <> ptPDChildSh1 var
R16113:16115 Coq.Init.Logic <> :type_scope:x_'='_x not
R16089:16096 Pip_state <> beqVAddr def
R16111:16112 Pip_Prop <> va var
R16098:16109 Pip_state <> defaultVAddr def
R16116:16129 Pip_Prop <> derivedPDChild var
R16135:16135 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16292:16296 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16149:16153 Pip_state <> index rec
R16193:16196 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16225:16228 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16197:16200 Pip_stateLib <> isVE def
R16224:16224 Pip_Prop <> s var
R16220:16222 Pip_Prop <> idx var
R16202:16218 Pip_Prop <> ptSh1ChildFromSh1 var
R16229:16244 Pip_stateLib <> getTableAddrRoot def
R16291:16291 Pip_Prop <> s var
R16283:16289 Pip_Prop <> shadow1 var
R16271:16281 Pip_Prop <> currentPart var
R16264:16269 Pip_state <> sh1idx def
R16246:16262 Pip_Prop <> ptSh1ChildFromSh1 var
R16187:16189 Coq.Init.Logic <> :type_scope:x_'='_x not
R16156:16169 Pip_stateLib <> getIndexOfAddr def
R16179:16186 Pip_state <> fstLevel def
R16171:16177 Pip_Prop <> shadow1 var
R16190:16192 Pip_Prop <> idx var
R16339:16342 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16297:16297 Coq.Init.Logic <> :type_scope:x_'='_x not
R16330:16333 Coq.Init.Logic <> :type_scope:x_'='_x not
R16309:16312 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R16298:16308 Pip_state <> defaultPage def
R16313:16329 Pip_Prop <> ptSh1ChildFromSh1 var
R16334:16338 Coq.Init.Datatypes <> false constr
R16343:16343 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16448:16452 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16344:16350 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16361:16362 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16356:16360 Pip_state <> vaddr rec
R16402:16405 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16363:16371 Pip_stateLib <> isEntryVA def
R16401:16401 Pip_Prop <> s var
R16398:16399 Pip_Prop <> va var
R16391:16396 Pip_Prop <> idxSh1 var
R16373:16389 Pip_Prop <> ptSh1ChildFromSh1 var
R16430:16432 Coq.Init.Logic <> :type_scope:x_'='_x not
R16406:16413 Pip_state <> beqVAddr def
R16428:16429 Pip_Prop <> va var
R16415:16426 Pip_state <> defaultVAddr def
R16433:16447 Pip_Prop <> derivedSh1Child var
R16453:16453 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16592:16596 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16467:16471 Pip_state <> index rec
R16511:16514 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16534:16537 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16515:16518 Pip_stateLib <> isVE def
R16533:16533 Pip_Prop <> s var
R16529:16531 Pip_Prop <> idx var
R16520:16527 Pip_Prop <> childSh2 var
R16538:16553 Pip_stateLib <> getTableAddrRoot def
R16591:16591 Pip_Prop <> s var
R16583:16589 Pip_Prop <> shadow2 var
R16571:16581 Pip_Prop <> currentPart var
R16564:16569 Pip_state <> sh1idx def
R16555:16562 Pip_Prop <> childSh2 var
R16505:16507 Coq.Init.Logic <> :type_scope:x_'='_x not
R16474:16487 Pip_stateLib <> getIndexOfAddr def
R16497:16504 Pip_state <> fstLevel def
R16489:16495 Pip_Prop <> shadow2 var
R16508:16510 Pip_Prop <> idx var
R16630:16633 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16597:16597 Coq.Init.Logic <> :type_scope:x_'='_x not
R16621:16624 Coq.Init.Logic <> :type_scope:x_'='_x not
R16609:16612 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R16598:16608 Pip_state <> defaultPage def
R16613:16620 Pip_Prop <> childSh2 var
R16625:16629 Coq.Init.Datatypes <> false constr
R16634:16634 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16730:16734 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16635:16641 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16652:16653 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16647:16651 Pip_state <> vaddr rec
R16684:16687 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16654:16662 Pip_stateLib <> isEntryVA def
R16683:16683 Pip_Prop <> s var
R16680:16681 Pip_Prop <> va var
R16673:16678 Pip_Prop <> idxSh2 var
R16664:16671 Pip_Prop <> childSh2 var
R16712:16714 Coq.Init.Logic <> :type_scope:x_'='_x not
R16688:16695 Pip_state <> beqVAddr def
R16710:16711 Pip_Prop <> va var
R16697:16708 Pip_state <> defaultVAddr def
R16715:16729 Pip_Prop <> derivedSh2Child var
R16735:16735 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16876:16880 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16749:16753 Pip_state <> index rec
R16790:16793 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16817:16820 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16794:16797 Pip_stateLib <> isVE def
R16816:16816 Pip_Prop <> s var
R16812:16814 Pip_Prop <> idx var
R16799:16810 Pip_Prop <> childListSh1 var
R16821:16836 Pip_stateLib <> getTableAddrRoot def
R16875:16875 Pip_Prop <> s var
R16870:16873 Pip_Prop <> list var
R16858:16868 Pip_Prop <> currentPart var
R16851:16856 Pip_state <> sh1idx def
R16838:16849 Pip_Prop <> childListSh1 var
R16784:16786 Coq.Init.Logic <> :type_scope:x_'='_x not
R16756:16769 Pip_stateLib <> getIndexOfAddr def
R16776:16783 Pip_state <> fstLevel def
R16771:16774 Pip_Prop <> list var
R16787:16789 Pip_Prop <> idx var
R16918:16921 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16881:16881 Coq.Init.Logic <> :type_scope:x_'='_x not
R16909:16912 Coq.Init.Logic <> :type_scope:x_'='_x not
R16893:16896 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R16882:16892 Pip_state <> defaultPage def
R16897:16908 Pip_Prop <> childListSh1 var
R16913:16917 Coq.Init.Datatypes <> false constr
R16922:16922 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17041:17045 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16923:16929 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16940:16941 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16935:16939 Pip_state <> vaddr rec
R16988:16991 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16942:16950 Pip_stateLib <> isEntryVA def
R16987:16987 Pip_Prop <> s var
R16984:16985 Pip_Prop <> va var
R16965:16982 Pip_Prop <> idxConfigPagesList var
R16952:16963 Pip_Prop <> childListSh1 var
R17016:17018 Coq.Init.Logic <> :type_scope:x_'='_x not
R16992:16999 Pip_state <> beqVAddr def
R17014:17015 Pip_Prop <> va var
R17001:17012 Pip_state <> defaultVAddr def
R17019:17040 Pip_Prop <> derivedRefChildListSh1 var
R17091:17094 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17046:17056 Pip_stateLib <> isEntryPage def
R17090:17090 Pip_Prop <> s var
R17079:17088 Pip_Prop <> phyPDChild var
R17068:17077 Pip_Prop <> idxPDChild var
R17058:17066 Pip_Prop <> ptPDChild var
R17130:17133 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17095:17095 Coq.Init.Logic <> :type_scope:x_'='_x not
R17121:17124 Coq.Init.Logic <> :type_scope:x_'='_x not
R17107:17110 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R17096:17106 Pip_state <> defaultPage def
R17111:17120 Pip_Prop <> phyPDChild var
R17125:17129 Coq.Init.Datatypes <> false constr
R17134:17134 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17281:17285 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17154:17157 Pip_state <> page rec
R17202:17205 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17206:17208 Coq.Init.Logic <> :type_scope:'~'_x not
R17280:17280 Coq.Init.Logic <> :type_scope:'~'_x not
R17231:17234 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R17218:17220 Coq.Init.Logic <> :type_scope:x_'='_x not
R17209:17217 Pip_Prop <> partition var
R17221:17230 Pip_Prop <> phyPDChild var
R17235:17236 Coq.Lists.List <> In def
R17250:17266 Pip_stateLib <> getConfigPagesAux def
R17278:17278 Pip_Prop <> s var
R17268:17276 Pip_Prop <> partition var
R17238:17247 Pip_Prop <> phyPDChild var
R17160:17161 Coq.Lists.List <> In def
R17174:17186 Pip_stateLib <> getPartitions def
R17200:17200 Pip_Prop <> s var
R17188:17198 Pip_state <> multiplexer def
R17163:17171 Pip_Prop <> partition var
R17329:17332 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17286:17296 Pip_stateLib <> isEntryPage def
R17328:17328 Pip_Prop <> s var
R17316:17326 Pip_Prop <> phySh1Child var
R17309:17314 Pip_Prop <> idxSh1 var
R17298:17307 Pip_Prop <> ptSh1Child var
R17369:17372 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17333:17333 Coq.Init.Logic <> :type_scope:x_'='_x not
R17360:17363 Coq.Init.Logic <> :type_scope:x_'='_x not
R17345:17348 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R17334:17344 Pip_state <> defaultPage def
R17349:17359 Pip_Prop <> phySh1Child var
R17364:17368 Coq.Init.Datatypes <> false constr
R17373:17373 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17522:17526 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17393:17396 Pip_state <> page rec
R17441:17444 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17445:17447 Coq.Init.Logic <> :type_scope:'~'_x not
R17521:17521 Coq.Init.Logic <> :type_scope:'~'_x not
R17471:17474 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R17457:17459 Coq.Init.Logic <> :type_scope:x_'='_x not
R17448:17456 Pip_Prop <> partition var
R17460:17470 Pip_Prop <> phySh1Child var
R17475:17476 Coq.Lists.List <> In def
R17491:17507 Pip_stateLib <> getConfigPagesAux def
R17519:17519 Pip_Prop <> s var
R17509:17517 Pip_Prop <> partition var
R17478:17488 Pip_Prop <> phySh1Child var
R17399:17400 Coq.Lists.List <> In def
R17413:17425 Pip_stateLib <> getPartitions def
R17439:17439 Pip_Prop <> s var
R17427:17437 Pip_state <> multiplexer def
R17402:17410 Pip_Prop <> partition var
R17570:17573 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17527:17537 Pip_stateLib <> isEntryPage def
R17569:17569 Pip_Prop <> s var
R17557:17567 Pip_Prop <> phySh2Child var
R17550:17555 Pip_Prop <> idxSh2 var
R17539:17548 Pip_Prop <> ptSh2Child var
R17610:17613 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17574:17574 Coq.Init.Logic <> :type_scope:x_'='_x not
R17601:17604 Coq.Init.Logic <> :type_scope:x_'='_x not
R17586:17589 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R17575:17585 Pip_state <> defaultPage def
R17590:17600 Pip_Prop <> phySh2Child var
R17605:17609 Coq.Init.Datatypes <> false constr
R17614:17614 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17763:17767 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17634:17637 Pip_state <> page rec
R17682:17685 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17686:17688 Coq.Init.Logic <> :type_scope:'~'_x not
R17762:17762 Coq.Init.Logic <> :type_scope:'~'_x not
R17712:17715 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R17698:17700 Coq.Init.Logic <> :type_scope:x_'='_x not
R17689:17697 Pip_Prop <> partition var
R17701:17711 Pip_Prop <> phySh2Child var
R17716:17717 Coq.Lists.List <> In def
R17732:17748 Pip_stateLib <> getConfigPagesAux def
R17760:17760 Pip_Prop <> s var
R17750:17758 Pip_Prop <> partition var
R17719:17729 Pip_Prop <> phySh2Child var
R17640:17641 Coq.Lists.List <> In def
R17654:17666 Pip_stateLib <> getPartitions def
R17680:17680 Pip_Prop <> s var
R17668:17678 Pip_state <> multiplexer def
R17643:17651 Pip_Prop <> partition var
R17837:17840 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17768:17778 Pip_stateLib <> isEntryPage def
R17836:17836 Pip_Prop <> s var
R17817:17834 Pip_Prop <> phyConfigPagesList var
R17798:17815 Pip_Prop <> idxConfigPagesList var
R17780:17796 Pip_Prop <> ptConfigPagesList var
R17884:17887 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17841:17841 Coq.Init.Logic <> :type_scope:x_'='_x not
R17875:17878 Coq.Init.Logic <> :type_scope:x_'='_x not
R17853:17856 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R17842:17852 Pip_state <> defaultPage def
R17857:17874 Pip_Prop <> phyConfigPagesList var
R17879:17883 Coq.Init.Datatypes <> false constr
R17888:17888 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18051:18055 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17908:17911 Pip_state <> page rec
R17956:17959 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17960:17962 Coq.Init.Logic <> :type_scope:'~'_x not
R18050:18050 Coq.Init.Logic <> :type_scope:'~'_x not
R17993:17996 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R17972:17974 Coq.Init.Logic <> :type_scope:x_'='_x not
R17963:17971 Pip_Prop <> partition var
R17975:17992 Pip_Prop <> phyConfigPagesList var
R17997:17998 Coq.Lists.List <> In def
R18020:18036 Pip_stateLib <> getConfigPagesAux def
R18048:18048 Pip_Prop <> s var
R18038:18046 Pip_Prop <> partition var
R18000:18017 Pip_Prop <> phyConfigPagesList var
R17914:17915 Coq.Lists.List <> In def
R17928:17940 Pip_stateLib <> getPartitions def
R17954:17954 Pip_Prop <> s var
R17942:17952 Pip_state <> multiplexer def
R17917:17925 Pip_Prop <> partition var
R18105:18108 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18056:18066 Pip_stateLib <> isEntryPage def
R18104:18104 Pip_Prop <> s var
R18091:18102 Pip_Prop <> phyDescChild var
R18079:18089 Pip_Prop <> idxRefChild var
R18068:18077 Pip_Prop <> ptRefChild var
R18146:18149 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18109:18109 Coq.Init.Logic <> :type_scope:x_'='_x not
R18137:18140 Coq.Init.Logic <> :type_scope:x_'='_x not
R18121:18124 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R18110:18120 Pip_state <> defaultPage def
R18125:18136 Pip_Prop <> phyDescChild var
R18141:18145 Coq.Init.Datatypes <> false constr
R18150:18150 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18268:18272 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18170:18173 Pip_state <> page rec
R18218:18221 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18222:18223 Coq.Init.Logic <> :type_scope:'~'_x not
R18224:18225 Coq.Lists.List <> In def
R18241:18254 Pip_stateLib <> getConfigPages def
R18266:18266 Pip_Prop <> s var
R18256:18264 Pip_Prop <> partition var
R18227:18238 Pip_Prop <> phyDescChild var
R18176:18177 Coq.Lists.List <> In def
R18190:18202 Pip_stateLib <> getPartitions def
R18216:18216 Pip_Prop <> s var
R18204:18214 Pip_state <> multiplexer def
R18179:18187 Pip_Prop <> partition var
R18316:18319 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18273:18288 Pip_stateLib <> isPartitionFalse def
R18315:18315 Pip_Prop <> s var
R18308:18313 Pip_Prop <> idxSh1 var
R18290:18306 Pip_Prop <> ptSh1ChildFromSh1 var
R18354:18357 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18320:18335 Pip_stateLib <> isPartitionFalse def
R18353:18353 Pip_Prop <> s var
R18346:18351 Pip_Prop <> idxSh2 var
R18337:18344 Pip_Prop <> childSh2 var
R18408:18411 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18358:18373 Pip_stateLib <> isPartitionFalse def
R18407:18407 Pip_Prop <> s var
R18388:18405 Pip_Prop <> idxConfigPagesList var
R18375:18386 Pip_Prop <> childListSh1 var
R18460:18463 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18412:18427 Pip_stateLib <> isPartitionFalse def
R18459:18459 Pip_Prop <> s var
R18447:18457 Pip_Prop <> idxRefChild var
R18429:18445 Pip_Prop <> ptRefChildFromSh1 var
R18464:18479 Pip_stateLib <> isPartitionFalse def
R18505:18505 Pip_Prop <> s var
R18494:18503 Pip_Prop <> idxPDChild var
R18481:18492 Pip_Prop <> ptPDChildSh1 var
def 18522:18549 <> propagatedPropertiesAddVaddr
R18584:18588 Pip_state <> vaddr rec
R18902:18902 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21096:21100 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18924:18927 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18903:18921 Pip_Prop <> partitionsIsolation def
R18923:18923 Pip_Prop <> s var
R18949:18952 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18928:18946 Pip_Prop <> kernelDataIsolation def
R18948:18948 Pip_Prop <> s var
R18970:18974 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18953:18967 Pip_Prop <> verticalSharing def
R18969:18969 Pip_Prop <> s var
R18988:18991 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18975:18985 Pip_Prop <> consistency def
R18987:18987 Pip_Prop <> s var
R19097:19100 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18992:18992 Coq.Init.Logic <> :type_scope:x_'='_x not
R19088:19091 Coq.Init.Logic <> :type_scope:x_'='_x not
R18997:19000 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R18993:18996 Pip_state <> Kidx def
R19001:19003 Coq.Lists.List <> nth def
R19076:19087 Pip_state <> defaultIndex def
R19055:19074 Pip_Prop <> vaInCurrentPartition var
R19033:19036 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R19052:19052 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R19006:19011 Coq.Init.Datatypes <> length def
R19013:19032 Pip_Prop <> vaInCurrentPartition var
R19048:19050 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R19044:19046 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R19037:19043 Pip_state <> nbLevel prfax
R19092:19096 Coq.Init.Datatypes <> false constr
R19180:19183 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19101:19101 Coq.Init.Logic <> :type_scope:x_'='_x not
R19171:19174 Coq.Init.Logic <> :type_scope:x_'='_x not
R19106:19109 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R19102:19105 Pip_state <> Kidx def
R19110:19112 Coq.Lists.List <> nth def
R19159:19170 Pip_state <> defaultIndex def
R19151:19157 Pip_Prop <> vaChild var
R19129:19132 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R19148:19148 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R19115:19120 Coq.Init.Datatypes <> length def
R19122:19128 Pip_Prop <> vaChild var
R19144:19146 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R19140:19142 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R19133:19139 Pip_state <> nbLevel prfax
R19175:19179 Coq.Init.Datatypes <> false constr
R19216:19219 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19195:19197 Coq.Init.Logic <> :type_scope:x_'='_x not
R19184:19194 Pip_Prop <> currentPart var
R19198:19213 Pip_state <> currentPartition proj
R19215:19215 Pip_Prop <> s var
R19243:19246 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19230:19232 Coq.Init.Logic <> :type_scope:x_'='_x not
R19220:19223 Coq.Init.Datatypes <> Some constr
R19225:19229 Pip_Prop <> level var
R19233:19242 Pip_stateLib <> getNbLevel def
R19295:19298 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19247:19259 Pip_stateLib <> nextEntryIsPP def
R19294:19294 Pip_Prop <> s var
R19280:19292 Pip_Prop <> currentShadow var
R19273:19278 Pip_state <> sh1idx def
R19261:19271 Pip_Prop <> currentPart var
R19347:19350 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19332:19334 Coq.Init.Logic <> :type_scope:x_'='_x not
R19299:19312 Pip_stateLib <> getIndexOfAddr def
R19324:19331 Pip_state <> fstLevel def
R19314:19322 Pip_Prop <> descChild var
R19335:19346 Pip_Prop <> idxDescChild var
R19405:19408 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19351:19354 Pip_stateLib <> isVE def
R19404:19404 Pip_Prop <> s var
R19369:19382 Pip_stateLib <> getIndexOfAddr def
R19394:19401 Pip_state <> fstLevel def
R19384:19392 Pip_Prop <> descChild var
R19356:19366 Pip_Prop <> ptDescChild var
R19468:19471 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19409:19424 Pip_stateLib <> getTableAddrRoot def
R19467:19467 Pip_Prop <> s var
R19457:19465 Pip_Prop <> descChild var
R19445:19455 Pip_Prop <> currentPart var
R19438:19443 Pip_state <> sh1idx def
R19426:19436 Pip_Prop <> ptDescChild var
R19508:19511 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19472:19472 Coq.Init.Logic <> :type_scope:x_'='_x not
R19499:19502 Coq.Init.Logic <> :type_scope:x_'='_x not
R19484:19487 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R19473:19483 Pip_state <> defaultPage def
R19488:19498 Pip_Prop <> ptDescChild var
R19503:19507 Coq.Init.Datatypes <> false constr
R19555:19558 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19512:19522 Pip_stateLib <> entryPDFlag def
R19554:19554 Pip_Prop <> s var
R19549:19552 Coq.Init.Datatypes <> true constr
R19536:19547 Pip_Prop <> idxDescChild var
R19524:19534 Pip_Prop <> ptDescChild var
R19626:19629 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19559:19562 Pip_stateLib <> isVE def
R19625:19625 Pip_Prop <> s var
R19579:19592 Pip_stateLib <> getIndexOfAddr def
R19615:19622 Pip_state <> fstLevel def
R19594:19613 Pip_Prop <> vaInCurrentPartition var
R19564:19576 Pip_Prop <> ptVaInCurPart var
R19702:19705 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19630:19645 Pip_stateLib <> getTableAddrRoot def
R19701:19701 Pip_Prop <> s var
R19680:19699 Pip_Prop <> vaInCurrentPartition var
R19668:19678 Pip_Prop <> currentPart var
R19661:19666 Pip_state <> sh1idx def
R19647:19659 Pip_Prop <> ptVaInCurPart var
R19744:19747 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19706:19706 Coq.Init.Logic <> :type_scope:x_'='_x not
R19735:19738 Coq.Init.Logic <> :type_scope:x_'='_x not
R19718:19721 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R19707:19717 Pip_state <> defaultPage def
R19722:19734 Pip_Prop <> ptVaInCurPart var
R19739:19743 Coq.Init.Datatypes <> false constr
R19809:19812 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19792:19794 Coq.Init.Logic <> :type_scope:x_'='_x not
R19748:19761 Pip_stateLib <> getIndexOfAddr def
R19784:19791 Pip_state <> fstLevel def
R19763:19782 Pip_Prop <> vaInCurrentPartition var
R19795:19808 Pip_Prop <> idxvaInCurPart var
R19860:19863 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19813:19821 Pip_stateLib <> isEntryVA def
R19859:19859 Pip_Prop <> s var
R19852:19857 Pip_Prop <> vainve var
R19837:19850 Pip_Prop <> idxvaInCurPart var
R19823:19835 Pip_Prop <> ptVaInCurPart var
R19905:19908 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19892:19894 Coq.Init.Logic <> :type_scope:x_'='_x not
R19864:19871 Pip_state <> beqVAddr def
R19886:19891 Pip_Prop <> vainve var
R19873:19884 Pip_state <> defaultVAddr def
R19895:19904 Pip_Prop <> isnotderiv var
R19952:19955 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19909:19921 Pip_stateLib <> nextEntryIsPP def
R19951:19951 Pip_Prop <> s var
R19941:19949 Pip_Prop <> currentPD var
R19935:19939 Pip_state <> PDidx def
R19923:19933 Pip_Prop <> currentPart var
R20025:20028 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19956:19959 Pip_stateLib <> isPE def
R20024:20024 Pip_Prop <> s var
R19978:19991 Pip_stateLib <> getIndexOfAddr def
R20014:20021 Pip_state <> fstLevel def
R19993:20012 Pip_Prop <> vaInCurrentPartition var
R19961:19975 Pip_Prop <> ptVaInCurPartpd var
R20102:20105 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20029:20044 Pip_stateLib <> getTableAddrRoot def
R20101:20101 Pip_Prop <> s var
R20080:20099 Pip_Prop <> vaInCurrentPartition var
R20068:20078 Pip_Prop <> currentPart var
R20062:20066 Pip_state <> PDidx def
R20046:20060 Pip_Prop <> ptVaInCurPartpd var
R20146:20149 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20106:20106 Coq.Init.Logic <> :type_scope:x_'='_x not
R20137:20140 Coq.Init.Logic <> :type_scope:x_'='_x not
R20118:20121 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R20107:20117 Pip_state <> defaultPage def
R20122:20136 Pip_Prop <> ptVaInCurPartpd var
R20141:20145 Coq.Init.Datatypes <> false constr
R20210:20213 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20150:20162 Pip_stateLib <> entryUserFlag def
R20209:20209 Pip_Prop <> s var
R20195:20207 Pip_Prop <> accessiblesrc var
R20180:20193 Pip_Prop <> idxvaInCurPart var
R20164:20178 Pip_Prop <> ptVaInCurPartpd var
R20274:20277 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20214:20229 Pip_stateLib <> entryPresentFlag def
R20273:20273 Pip_Prop <> s var
R20262:20271 Pip_Prop <> presentmap var
R20247:20260 Pip_Prop <> idxvaInCurPart var
R20231:20245 Pip_Prop <> ptVaInCurPartpd var
R20334:20337 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20278:20281 Pip_stateLib <> isPE def
R20333:20333 Pip_Prop <> s var
R20298:20311 Pip_stateLib <> getIndexOfAddr def
R20323:20330 Pip_state <> fstLevel def
R20313:20321 Pip_Prop <> descChild var
R20283:20295 Pip_Prop <> ptDescChildpd var
R20398:20401 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20338:20353 Pip_stateLib <> getTableAddrRoot def
R20397:20397 Pip_Prop <> s var
R20387:20395 Pip_Prop <> descChild var
R20375:20385 Pip_Prop <> currentPart var
R20369:20373 Pip_state <> PDidx def
R20355:20367 Pip_Prop <> ptDescChildpd var
R20440:20443 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20402:20402 Coq.Init.Logic <> :type_scope:x_'='_x not
R20431:20434 Coq.Init.Logic <> :type_scope:x_'='_x not
R20414:20417 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R20403:20413 Pip_state <> defaultPage def
R20418:20430 Pip_Prop <> ptDescChildpd var
R20435:20439 Coq.Init.Datatypes <> false constr
R20493:20496 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20477:20479 Coq.Init.Logic <> :type_scope:x_'='_x not
R20444:20457 Pip_stateLib <> getIndexOfAddr def
R20469:20476 Pip_state <> fstLevel def
R20459:20467 Pip_Prop <> descChild var
R20480:20492 Pip_Prop <> idxDescChild1 var
R20558:20561 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20497:20512 Pip_stateLib <> entryPresentFlag def
R20557:20557 Pip_Prop <> s var
R20542:20555 Pip_Prop <> presentDescPhy var
R20528:20540 Pip_Prop <> idxDescChild1 var
R20514:20526 Pip_Prop <> ptDescChildpd var
R20616:20619 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20562:20572 Pip_stateLib <> isEntryPage def
R20615:20615 Pip_Prop <> s var
R20602:20613 Pip_Prop <> phyDescChild var
R20588:20600 Pip_Prop <> idxDescChild1 var
R20574:20586 Pip_Prop <> ptDescChildpd var
R20672:20675 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20620:20621 Coq.Lists.List <> In def
R20637:20647 Pip_stateLib <> getChildren def
R20670:20670 Pip_Prop <> s var
R20650:20665 Pip_state <> currentPartition proj
R20667:20667 Pip_Prop <> s var
R20623:20634 Pip_Prop <> phyDescChild var
R20721:20724 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20676:20688 Pip_stateLib <> nextEntryIsPP def
R20720:20720 Pip_Prop <> s var
R20709:20718 Pip_Prop <> pdChildphy var
R20703:20707 Pip_state <> PDidx def
R20690:20701 Pip_Prop <> phyDescChild var
R20777:20780 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20725:20728 Pip_stateLib <> isPE def
R20776:20776 Pip_Prop <> s var
R20743:20756 Pip_stateLib <> getIndexOfAddr def
R20766:20773 Pip_state <> fstLevel def
R20758:20764 Pip_Prop <> vaChild var
R20730:20740 Pip_Prop <> ptVaChildpd var
R20838:20841 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20781:20796 Pip_stateLib <> getTableAddrRoot def
R20837:20837 Pip_Prop <> s var
R20829:20835 Pip_Prop <> vaChild var
R20816:20827 Pip_Prop <> phyDescChild var
R20810:20814 Pip_state <> PDidx def
R20798:20808 Pip_Prop <> ptVaChildpd var
R20878:20881 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20842:20842 Coq.Init.Logic <> :type_scope:x_'='_x not
R20869:20872 Coq.Init.Logic <> :type_scope:x_'='_x not
R20854:20857 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R20843:20853 Pip_state <> defaultPage def
R20858:20868 Pip_Prop <> ptVaChildpd var
R20873:20877 Coq.Init.Datatypes <> false constr
R20926:20929 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20913:20915 Coq.Init.Logic <> :type_scope:x_'='_x not
R20882:20895 Pip_stateLib <> getIndexOfAddr def
R20905:20912 Pip_state <> fstLevel def
R20897:20903 Pip_Prop <> vaChild var
R20916:20925 Pip_Prop <> idxvaChild var
R20986:20989 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20930:20945 Pip_stateLib <> entryPresentFlag def
R20985:20985 Pip_Prop <> s var
R20970:20983 Pip_Prop <> presentvaChild var
R20959:20968 Pip_Prop <> idxvaChild var
R20947:20957 Pip_Prop <> ptVaChildpd var
R21045:21048 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20990:21000 Pip_stateLib <> isEntryPage def
R21044:21044 Pip_Prop <> s var
R21033:21042 Pip_Prop <> phyVaChild var
R21018:21031 Pip_Prop <> idxvaInCurPart var
R21002:21016 Pip_Prop <> ptVaInCurPartpd var
R21049:21061 Pip_stateLib <> nextEntryIsPP def
R21095:21095 Pip_Prop <> s var
R21083:21093 Pip_Prop <> sh2Childphy var
R21076:21081 Pip_state <> sh2idx def
R21063:21074 Pip_Prop <> phyDescChild var
R21154:21157 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21101:21104 Pip_stateLib <> isVA def
R21153:21153 Pip_Prop <> s var
R21120:21133 Pip_stateLib <> getIndexOfAddr def
R21143:21150 Pip_state <> fstLevel def
R21135:21141 Pip_Prop <> vaChild var
R21106:21117 Pip_Prop <> ptVaChildsh2 var
R21217:21220 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21158:21173 Pip_stateLib <> getTableAddrRoot def
R21216:21216 Pip_Prop <> s var
R21208:21214 Pip_Prop <> vaChild var
R21195:21206 Pip_Prop <> phyDescChild var
R21188:21193 Pip_state <> sh2idx def
R21175:21186 Pip_Prop <> ptVaChildsh2 var
R21221:21221 Coq.Init.Logic <> :type_scope:x_'='_x not
R21249:21252 Coq.Init.Logic <> :type_scope:x_'='_x not
R21233:21236 Coq.Arith.PeanoNat <> :nat_scope:x_'=?'_x not
R21222:21232 Pip_state <> defaultPage def
R21237:21248 Pip_Prop <> ptVaChildsh2 var
R21253:21257 Coq.Init.Datatypes <> false constr
